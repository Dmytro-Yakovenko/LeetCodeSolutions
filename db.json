{
    "problems":[
        {   
            "id":"1",
            "title":"1. Two Sum",
            "description":"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. \nExample 1:\nInput: nums = [2,7,11,15], target = 9 \nOutput: [0,1] \nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\nExample 2: \nInput: nums = [3,2,4], target = 6 \nOutput: [1,2] \nExample 3: \nInput: nums = [3,3], target = 6 \nOutput: [0,1]",
            "level":"easy",
            "img-url":"",
             "code": "var twoSum = function(nums, target) {\n  let obj = {};\n  for (let i = 0; i < nums.length; i++) {\n    obj[nums[i]] = i;\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (obj[target - nums[i]] !== undefined && obj[target - nums[i]] !== i) {\n      return [i, obj[target - nums[i]]];\n    }\n  }\n};\nconsole.log(twoSum([2, 7, 11, 15], 9));",
             "language":"javascript"
              
           

        },
        {
            "id":"2",
            "title":"7. Reverse Integer",
            "description":"Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0. Assume the environment does not allow you to store 64-bit integers (signed or unsigned). \nExample 1: \nInput: x = 123 \nOutput: 321 \nExample 2: \nInput: x = -123 \nOutput: -321 \nExample 3: \nInput: x = 120 \nOutput: 21",
            "level":"medium",
            "code": "var reverse = function(x) {\n\tlet res;\n\tif (x < 0) {\n\t\tres = parseInt(\"-\" + Math.abs(x).toString().split('').reverse().join(''));\n\t} else {\n\t\tres = parseInt(Math.abs(x).toString().split('').reverse().join(''));\n\t}\n\tif (res > 2**31 - 1 || res < (-2)**31) return 0;\n\treturn res;\n};\nconsole.log(reverse(-123));",
            "language":"javascript"
        },
        {
            "id":"3",
            "title":"Binary Search",
            "description":"Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1. You must write an algorithm with O(log n) runtime complexity.",
            "level":"easy",
              "code": "var search = function(nums, target) {\n\tlet left = 0;\n\tlet right = nums.length - 1;\n\twhile (left <= right) {\n\t\tlet midPoint = Math.floor((left + right) / 2);\n\t\tif (target === nums[midPoint]) return midPoint;\n\t\tif (target > nums[midPoint]) {\n\t\t\tleft = midPoint + 1;\n\t\t} else {\n\t\t\tright = midPoint - 1;\n\t\t}\n\t}\n\treturn -1;\n};\nconsole.log(search([-1,0,3,5,9,12], 9));",
            "language":"javascript"
        },
        {
            "id":"4",
            "title":"73. Set Matrix Zeroes",
            "description":"Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.You must do it in place.\n Example 1: \nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n Output: [[1,0,1],[0,0,0],[1,0,1]] ",
            "level":"medium",
            "imgUrl":"https://res.cloudinary.com/dr1ekjmf4/image/upload/v1719327462/mat1_vezbro.jpg",
            "video-url":"",
             "code": "var setZeroes = function(matrix) {\n\tlet rows = new Set();\n\tlet cols = new Set();\n\tfor (let i = 0; i < matrix.length; i++) {\n\t\tfor (let j = 0; j < matrix[0].length; j++) {\n\t\t\tif (matrix[i][j] == 0) {\n\t\t\t\trows.add(i);\n\t\t\t\tcols.add(j);\n\t\t\t}\n\t\t}\n\t}\n\tfor (let key of rows) {\n\t\tfor (let k = 0; k < matrix[key].length; k++) {\n\t\t\tmatrix[key][k] = 0;\n\t\t}\n\t}\n\tfor (let key of cols) {\n\t\tfor (let n = 0; n < matrix.length; n++) {\n\t\t\tmatrix[n][key] = 0;\n\t\t}\n\t}\n\treturn matrix;\n}",
             "language":"javascript"

        },
        {
            "id":"5",
            "title":"169. Majority Element",
            "description":"Given an array nums of size n, return the majority element.The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.\n Example 1:\n Input: nums = [3,2,3]\nOutput: 3 \n Example 2:\nInput: nums = [2,2,1,1,1,2,2]\nOutput: 2",
            "level":"easy",
            "imgUrl":"",
            "video-url":"",
             "code":  "var majorityElement = function(nums) {\n   let obj = {};\n   for (let i = 0; i < nums.length; i++) {\n    if (obj[nums[i]] === undefined) {\n        obj[nums[i]] = 1;\n    } else {\n        obj[nums[i]]++;\n    }\n   }\n   for (key in obj) {\n    if (obj[key] > nums.length / 2) {\n        return key;\n    }\n   }\n}",
             "language":"javascript"

        }


    ],
    "users":[
        {   
            "id":"1",
            "name":"Demo",
            "email":"demo@gmail.com",
            "password":"password"
        }
    ]
}